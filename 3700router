#!/usr/bin/env -S python3 -u

# Jackson Green and Tim Doyle
# Networks and Distributed Systems
# TF 9:50 AM Section and TF 3:25 PM Section, respectively
# Prof. Alden Jackson
# Project 3: BGP Router
# Coded in Python

import argparse, socket, time, json, select, struct, sys, math

def ipInRange(ip, network, netmask):
    mask = sum(map(lambda x: bin(x).count("1"), map(int, netmask.split("."))))
    rangeip = int("".join(map(lambda x: x.split("b")[1].rjust(8, "0"), map(str, map(bin, map(int, network.split(".")))))))
    targetip = int("".join(map(lambda x: x.split("b")[1].rjust(8, "0"), map(str, map(bin, map(int, ip.split(".")))))))
    rangeip = rangeip // (10 ** mask)
    targetip = targetip // (10 ** mask)
    return rangeip == targetip

class Router:
    debug = True
    relations = {}
    sockets = {}
    ports = {}
    routing = []
    neighbors = []
    inbox = []

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.neighbors.append(neighbor)
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {} }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = json.loads(k.decode('utf-8'))
                self.inbox.append(msg)
                if msg["type"] == "update":
                    self.routing.append({"peer": msg["src"], "network": msg["msg"]["network"], "netmask": msg["msg"]["netmask"], "localpref": msg["msg"]["localpref"], "selfOrigin": msg["msg"]["selfOrigin"], "ASPath": msg["msg"]["ASPath"], "origin": msg["msg"]["origin"]})
                    newASPath = [self.asn]
                    newASPath.extend(msg["msg"]["ASPath"])
                    for neighbor in self.neighbors:
                        if neighbor != msg["src"]:
                            self.send(neighbor, json.dumps({ "type": "update", "src": self.our_addr(neighbor), "dst": neighbor, "msg": { "network": msg["msg"]["network"], "netmask": msg["msg"]["netmask"], "ASPath": newASPath } }))
                elif msg["type"] == "data":
                    pathOptions = []
                    for route in self.routing:
                        if ipInRange(msg["dst"], route["network"], route["netmask"]):
                            pathOptions.append(route)
                    print(pathOptions)
                    self.send(pathOptions[0]["peer"], json.dumps({ "type": "data", "src": self.our_addr(neighbor), "dst": msg["dst"], "msg": msg["msg"] }))
                elif msg["type"] == "dump":
                    self.send(msg["src"], json.dumps({ "type": "table", "src": self.our_addr(neighbor), "dst": msg["src"], "msg": self.routing }))
                print("Received message '%s' from %s" % (msg, srcif))
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
